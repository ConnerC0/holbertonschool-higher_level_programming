===============================
7. Integer validator module
===============================

``BaseGeometry()`` is a class with an `area()` and
`integer_validator` public instance methods.

Import module:
==============
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Tests
=====

Test Case #0: print doc
	>>> geometry = BaseGeometry()
	>>> print(geometry.__doc__)
	 Superclass meant to implement geometrical shapes 

Test Case #1: a normal integer
	>>> geometry = BaseGeometry()
	>>> geometry.integer_validator("the_int", 7)

	>>> geometry.integer_validator("width", 55)

Test Case #2: a string
	>>> geometry = BaseGeometry()
	>>> geometry.integer_validator("name", "Jason")
	Traceback (most recent call last):
	TypeError: name must be an integer

Test Case #3: no args
	>>> geometry = BaseGeometry()
	>>>geometry.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Test Case #4: 1 arg
	>>> geometry = BaseGeometry()
	>>>geometry.integer_validator("length")
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'

Test Case #5: 3 args
	>>> geometry = BaseGeometry()
	>>>geometry.integer_validator("width", 1, 2)
	Traceback (most recent call last):
	TypeError: integer_validator() takes 3 positional arguments but 4 were given

Test Case #6: Zero
	>>> geometry = BaseGeometry()
	>>>geometry.integer_validator("size", 0)
	Traceback (most recent call last):
	ValueError: size must be greater than 0

Test Case #7: negative integer
	>>> geometry = BaseGeometry()
	>>>geometry.integer_validator("size", -2)
	Traceback (most recent call last):
	ValueError: size must be greater than 0
