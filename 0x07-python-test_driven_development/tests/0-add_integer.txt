====================================
0. The Integer Addition Module
====================================

Using ''add_integer''
---------------------

Import Module:
==============
	>>> add_integer = __import__('0-add_integer').add_integer


Test Cases:
===========

Test Case #0: Testing two 0's
	>>> add_integer(0, 0)
	0

Test Case #1: Testing one 0
	>>> add_integer(0)
	98

Test Case #2: Testing two integers
	>>> add_integer(2, 2)
	4

Test Case #3: Testing floats
	>>> add_integer(100.3, -2.5)
	98

Test Case #4: Testing without parameters
	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'

Test Case #5: Testing an argument without an assigned value
	>>> add_integer(a, 1)
	Traceback (most recent call last):
	NameError: name 'a' is not defined

Test Case #6: Testing default value of variable 'b'
	>>> add_integer(100)
	198

Test Case #7: Testing default value of variable 'b' with a float
	>>> add_integer(1.3)
	99

Test Case #8: Testing negatives
	>>> add_integer(-3, -3)
	-6

Test Case #9: Testing negative floats
	>>> add_integer(-3.3, -3.3)
	-6

Test Case #10: Testing for a string in variable 'a'
	>>> add_integer("add", 0)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test Case #11: Testing for string in variable 'b'
	>>> add_integer(0, "add")
	Traceback (most recent call last):
	TypeError: b must be an integer

Test Case #12: Testing value "None" for variable 'a'
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test Case #13: Testing value "None" for variable 'b'
	>>> add_integer(0, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

Test Case #14: Testing a 'list' for variable 'a'
	>>> add_integer([1, 2], 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

Test Case #15: Testing an infinity float and negative
	>>> add_integer(999e9999, -1)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test Case #16: Testing an integer and infinity float
	>>> add_integer(5, 999e9999)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Test Case #17: Testing the returned integer type
	>>> type(add_integer(2, 2))
	<class 'int'>
